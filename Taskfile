#!/bin/bash
PATH="$PWD/node_modules/.bin":$PATH
set -e

api_spec() {
    export APIURL=http://localhost:3000/api
    sh test/run-api-tests.sh
}

build() {
    set -x
    npm run prisma:g
    rm -rf dist
    mkdir dist
    nest build
    mkdir -p dist/prisma/migrations
    cp -r prisma/migrations/* dist/prisma/migrations
    cp prisma/schema.prisma dist/prisma
    mkdir -p dist/node_modules/@prisma/client
    cp -r node_modules/@prisma/client/* dist/node_modules/@prisma/client
    set +x
}

# Deploy package for monorepo strategy
# Example: sh Taskfile deploy_package src/subpackage
# setup global for faster deployment several package:
# npm i -g semantic-release semantic-release-monorepo @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/git @semantic-release/github @semantic-release/npm @semantic-release/release-notes-generator remark-cli remark-license
# npm i --no-save remark-cli remark-license remark-toc
deploy_package() {
    set -x
    root=`pwd`
    build_package $1
    cd $1
    npx semantic-release -e semantic-release-monorepo
    cd $root
    set +x
}

# build sub package (monorepo)
build_package() {
    echo Building package $1

    # Prepare
    root=`pwd`
    rootPackage=`cat package.json`
    rootTsConfig=`cat tsconfig.json`

    # Switching directory to package
    cd "$root/$1"

    # Clean
    rm -rfv dist
    mkdir dist

    build_package_json

    # Remark
    [ ! -f ./.remarkrc.js ] && cp -vf "$root/.remarkrc.js" . || true
    npx remark-cli README.md --output

    # Merge root and local tsconfig files
    localTsConfig=`cat tsconfig.json || echo {}`
    echo "$rootTsConfig" "$localTsConfig" \
        | jq -s '.[0] * .[1]' \
        | jq 'del(.include, .compilerOptions.outDir)' \
        > dist/tsconfig.json

    # Build
    cp -rfv *.ts ./dist
    cd dist
    /usr/bin/find . -name '*.spec.ts' | xargs rm -rvf
    tsc -p .
    rm -rvf tsconfig.json
    cd ..
    # Return to package directory
    # Copy other files to dist
    cp -vf README.md LICENSE package.json dist || true
    cd $root
    return 0
}

# Configure package.json for package
# $1 - path to subpackage root
build_package_json() {
    if [ -n "$1" ]; then
        parentScope=`pwd`
        cd $1
    fi
    [ ! -f package.json ] && npm init -y 1> /dev/null
    localPackage=`cat package.json`
    localPackage=`echo "$localPackage" | jq '.license = "MIT"'`
    author=`echo "$localPackage" | jq -r '.author | select (.!=null)'`
    if [ -z "$author" ]; then
        author=`date +"%Y"`
        localPackage=`echo "$localPackage" | jq --arg x "$author" '.author = $x'`
    fi
    # Update homepage field
    if [ -z `echo "$localPackage" | jq -r '.homepage | select (.!=null)'` ]; then
        rootHomepage=`echo "$rootPackage" | jq -r '.homepage | select (.!=null)' | sed s'/#readme//'`
        homepage="$rootHomepage/tree/master/$1"
        localPackage=`echo "$localPackage" | jq --arg x "$homepage" '.homepage = $x'`
    fi
    echo "$localPackage" > package.json
    [ -n "$1" ] && cd $parentScope
    return 0
}

"$@"
